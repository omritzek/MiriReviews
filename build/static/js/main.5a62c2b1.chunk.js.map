{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","state","movie","review","openFbPopUp","sharerURL","encodeURI","window","open","GenerateReview","e","intros","texts","middles","endings","introInd","Math","floor","random","length","middleInd","endingInd","tempReview","replace","preventDefault","setState","onInputSubmit","target","value","className","id","type","placeholder","this","onChange","onClick","src","FacebookShareButton","url","FacebookIcon","size","href","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"wOA2EeA,EArEf,2MACEC,MAAQ,CACNC,MAAO,GACPC,OAAQ,CAAC,GAAG,GAAG,KAHnB,EAMEC,YAAc,WACZ,IAAIC,EAAY,0DAA4DC,UAAU,kEAKtF,OAJAC,OAAOC,KACLH,EACA,wBACA,yBACM,GAZZ,EAeEI,eAAe,SAACC,GACd,IAAMC,EAASC,IACTC,EAAUD,IACVE,EAAUF,IACVG,EAAWC,KAAKC,MAAMD,KAAKE,SAASP,EAAOQ,QAC3CC,EAAYJ,KAAKC,MAAMD,KAAKE,SAASL,EAAQM,QAC7CE,EAAYL,KAAKC,MAAMD,KAAKE,SAASJ,EAAQK,QAE7CG,EAAa,CAACX,EAAOI,GAAUQ,QAAQ,MAAM,EAAKtB,MAAMC,OAC1CW,EAAQO,GAAWG,QAAQ,MAAM,EAAKtB,MAAMC,OAC5CY,EAAQO,GAAWE,QAAQ,MAAM,EAAKtB,MAAMC,QAChEQ,EAAEc,iBACF,EAAKC,SAAS,CAACtB,OAAQmB,KA3B3B,EA8BEI,cAAc,SAAChB,GACb,EAAKe,SAAS,CAACvB,MAAMQ,EAAEiB,OAAOC,SA/BlC,wEAmCI,OACE,yBAAKC,UAAU,OACT,gCACE,gKACA,qTAEF,6BACE,8BACE,2BAAOC,GAAG,YAAYC,KAAK,OAAOC,YAAY,wCAAUJ,MAAOK,KAAKhC,MAAMC,MAAOgC,SAAUD,KAAKP,gBAChG,4BAAQS,QAASF,KAAKxB,gBAAtB,6DAGsB,KAAzBwB,KAAKhC,MAAME,OAAO,IACnB,yBAAK0B,UAAU,UACb,yBAAKA,UAAU,UAAUO,IAAI,qBAC7B,yBAAKP,UAAU,iBACb,6BACGI,KAAKhC,MAAME,OAAO,IAErB,6BACG8B,KAAKhC,MAAME,OAAO,IAErB,6BACG8B,KAAKhC,MAAME,OAAO,IAErB,kBAACkC,EAAA,EAAD,CAAqBC,IAAI,0BAAyB,kBAACC,EAAA,EAAD,CAAcC,KAAK,SAArE,mGAGJ,2KAAkC,uBAAGC,KAAK,wCAAR,mHA/D9C,GAAyBC,IAAMC,WCMXC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,m+TEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.5a62c2b1.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as texts from './texts.json';\nimport {FacebookShareButton, FacebookIcon} from 'react-share';\n\nexport class App extends React.Component{\n  state = {\n    movie: '',\n    review: ['','','']\n  }\n\n  openFbPopUp = ()=> {\n    var sharerURL = \"http://www.facebook.com/sharer/sharer.php?s=100&p[url]=\" + encodeURI('שלום שמי חגי');\n    window.open(\n      sharerURL,\n      'facebook-share-dialog', \n      'width=626,height=436'); \n    return  false;\n  }\n\n  GenerateReview=(e)=>{\n    const intros = texts[0];\n    const middles = texts[1];\n    const endings = texts[2];\n    const introInd = Math.floor(Math.random()*intros.length);\n    const middleInd = Math.floor(Math.random()*middles.length);\n    const endingInd = Math.floor(Math.random()*endings.length);\n  \n    const tempReview = [intros[introInd].replace('{0}',this.state.movie),\n                        middles[middleInd].replace('{0}',this.state.movie),\n                        endings[endingInd].replace('{0}',this.state.movie)]\n    e.preventDefault();\n    this.setState({review: tempReview})\n  }\n\n  onInputSubmit=(e)=>{\n    this.setState({movie:e.target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n            <header>\n              <h1>מחולל הביקורות האוטומטי</h1>\n              <p>בחרו סרט ששרת התרבות מירי רגב תבקר, בלי לצפות בו פעם אחת!</p>\n            </header>\n            <div>\n              <form>\n                <input id='movieName' type=\"text\" placeholder=\"שם הסרט\" value={this.state.movie} onChange={this.onInputSubmit}></input>\n                <button onClick={this.GenerateReview}>צור ביקורת</button>\n              </form>\n            </div>\n            {this.state.review[0] !== '' && \n            <div className=\"Review\">\n              <img className=\"MiriPic\" src=\"./profilepic.png\"/>\n              <div className=\"WrittenReview\">\n                <div>\n                  {this.state.review[0]}\n                </div>\n                <div>\n                  {this.state.review[1]}\n                </div>\n                <div>\n                  {this.state.review[2]}\n                </div>\n                <FacebookShareButton url='https://www.pipi.co.il'><FacebookIcon size='14px' />שתפו שכל העולם ידע</FacebookShareButton>\n              </div>\n            </div>}\n            <footer>בקרו אותנו בפייסבוק בעמוד <a href='https://www.facebook.com/mirimovies/'>מירי רגב מבקרת סרטים</a></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}